{"level":"info","message":"Server started on port 5000","service":"user-service"}
{"level":"info","message":"database connected","service":"user-service"}
{"level":"info","message":"Server started on port 5000","service":"user-service"}
{"level":"error","message":"failed to connect database  The `uri` parameter to `openUri()` must be a string, got \"undefined\". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.","service":"user-service","stack":"MongooseError: The `uri` parameter to `openUri()` must be a string, got \"undefined\". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.\n    at _createMongoClient (G:\\University-Management-Application\\auth-management-service\\node_modules\\mongoose\\lib\\connection.js:805:11)\n    at NativeConnection.openUri (G:\\University-Management-Application\\auth-management-service\\node_modules\\mongoose\\lib\\connection.js:742:29)\n    at Mongoose.connect (G:\\University-Management-Application\\auth-management-service\\node_modules\\mongoose\\lib\\index.js:406:15)\n    at G:\\University-Management-Application\\auth-management-service\\src\\server.ts:13:20\n    at Generator.next (<anonymous>)\n    at G:\\University-Management-Application\\auth-management-service\\src\\server.ts:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (G:\\University-Management-Application\\auth-management-service\\src\\server.ts:4:12)\n    at bootstrap (G:\\University-Management-Application\\auth-management-service\\src\\server.ts:21:12)\n    at Object.<anonymous> (G:\\University-Management-Application\\auth-management-service\\src\\server.ts:21:1)"}
{"level":"info","message":"Server started on port 5000","service":"user-service"}
{"level":"info","message":"database connected","service":"user-service"}
{"level":"info","message":"Server started on port 5000","service":"user-service"}
{"level":"info","message":"database connected","service":"user-service"}
